MEKZKQY-4C4469Z-QMEP4D9-BPV634K
BZPMH3Z-F3149D2-MTDQCXR-K6KBE95
X2B2ND4-1WQ406E-GB49BE7-14FMA55
FM39E85-84EMRJN-NMNH4PY-BRJACPM


const genreOptions = [
  'аниме',
  'биография',
  'боевик',
  'детектив',
  'документальный',
  'драма',
  'история',
  'комедия',
  'криминал',
  'мелодрама',
  'музыка',
  'мультфильм',
  'спорт',
  'триллер',
  'ужасы',
  'фантастика'
];

import * as React from 'react';
import { Theme, useTheme } from '@mui/material/styles';
import Box from '@mui/material/Box';
import OutlinedInput from '@mui/material/OutlinedInput';
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import Select, { SelectChangeEvent } from '@mui/material/Select';
import Chip from '@mui/material/Chip';
import '../../styles/MainPage/MainPage.css';
import ListItemText from '@mui/material/ListItemText';
import Checkbox from '@mui/material/Checkbox';

const ITEM_HEIGHT = 48;
const ITEM_PADDING_TOP = 8;
const MenuProps = {
  PaperProps: {
    style: {
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
      width: 250,
    },
  },
};

const genreOptions = [
  'аниме',
  'биография',
  'боевик',
  'детектив',
  'документальный',
  'драма',
  'история',
  'комедия',
  'криминал',
  'мелодрама'
  'музыка',
  'мультфильм',
  'спорт',
  'триллер',
  'ужасы',
  'фантастика'
];

function getStyles(name: string, selectedGenresState: string[], theme: Theme) {
  return {
    fontWeight:
      selectedGenresState.indexOf(name) === -1
        ? theme.typography.fontWeightRegular
        : theme.typography.fontWeightMedium,
  };
}

interface FilterGenresProps {
  selectedGenres: string[];
  onGenresChange: (genres: string[]) => void;
}

const FilterGenres: React.FC<FilterGenresProps> = ({ selectedGenres, onGenresChange }) => {
  const theme = useTheme();
  const [selectedGenresState, setSelectedGenresState] = React.useState<string[]>(selectedGenres);

  const handleChange = (event: SelectChangeEvent<string[]>) => {
    const {
      target: { value },
    } = event;
    const newSelectedGenres = typeof value === 'string' ? value.split(',') : value;
    setSelectedGenresState(newSelectedGenres);
    onGenresChange(newSelectedGenres);
  };

  return (
    <div>
      <FormControl sx={{ m: 1, width: 300 }}>
        <InputLabel id="demo-multiple-checkbox-label">Жанры</InputLabel>
        <Select
          labelId="demo-multiple-checkbox-label"
          id="demo-multiple-checkbox"
          multiple
          value={selectedGenresState}
          onChange={handleChange}
          input={<OutlinedInput label="Жанры" />}
          renderValue={(selected) => selected.join(', ')}
          MenuProps={MenuProps}
        >
          {genreOptions.map((genre) => (
            <MenuItem key={genre} value={genre}>
              <Checkbox checked={selectedGenresState.indexOf(genre) > -1} />
              <ListItemText primary={genre} />
            </MenuItem>
          ))}
        </Select>
      </FormControl>
    </div>
  );
}

export default FilterGenres;



{/* <FormControl sx={{ m: 1, width: 200 }}>
        <InputLabel id="demo-multiple-chip-label">Жанры</InputLabel>
        <Select
          labelId="demo-multiple-chip-label"
          id="demo-multiple-chip"
          multiple
          value={selectedGenresState}
          onChange={handleChange}
          input={<OutlinedInput id="select-multiple-chip" label="Жанры" />}
          renderValue={(selected) => (
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
              {selected.map((value) => (
                <Chip key={value} label={value} />
              ))}
            </Box>
          )}
          MenuProps={MenuProps}
        >
          {genreOptions.map((name) => (
            <MenuItem
              key={name}
              value={name}
              style={getStyles(name, selectedGenresState, theme)}
            >
              {name}
            </MenuItem>
          ))}
        </Select>
      </FormControl> */}
